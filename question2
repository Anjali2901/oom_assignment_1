2. For question 1, consider that there are m students. The students have a type. Type 0 student attempt
assignments in the order of deadline, the nearest deadline first. Type 1 students attempt assignments in the
order of maximum base marks, highest base marks first. Type 2 students attempt assignments in the
alphabetical order of course ID. Course ID is unique and is used as a tie breaker for all cases.
A collection of all students constitutes a batch. Each assignment is applicable for all m students. Print the same
details for all students of a batch.
You must minimally implement a student class, a date class, an assignment class and a batch class. 

Input Format:
First line is the number of test cases
Next line is m, the number of students
Next m lines have the roll number, name of the student (single
string without spaces), intelligence and type separated by a space
Next line is the total number of assignments, N
Each subsequent line gives the assignment ID (string), course ID
(string), deadline day, deadline month, deadline year, base marks
and difficulty. 
1
3
IIT2016001 Owais 5 0
LIT2016001 Sahil 7 1
IRM2016001 Adarsh 2
7
A0 IOOM332C 20 8 2017 10 1
A1 SMAT330C 5 9 2017 16 2
A2 ITOC330C 31 8 2017 20 7
A3 SMAT330C 25 8 2017 5 8
A4 IOPS332C 28 8 2017 8 4
A5 IOOM332C 10 9 2017 8 5
A6 EMIP332C 6 9 2017 10 6


Output format
For all m students:
The first line prints the roll number and
studentâ€™s name
Then variable lines follow, one for each
assignment. Each line prints the assignment
ID, course ID and the marks obtained.
The last line prints the total marks obtained. 
Sample Output
IIT2016001 Owais
A0 IOOM332C 50
A4 IOPS332C 20
A1 SMAT330C 10
A5 IOOM332C 25
105
LIT2016001 Sahil
A2 ITOC330C 140
A1 SMAT330C 112
A0 IOOM332C 70
A6 EMIP332C 70
A4 IOPS332C 56
A5 IOOM332C 56
504
IRM2016001 Adarsh
A0 IOOM332C 30
A1 SMAT330C 48
78


-----------------------------
         SOLUTION
-----------------------------


import java.util.*;
 
public class TestClass{
	public static class sortbyid implements Comparator<Assignment>{//this does sorting by id for the type 2 students 
		@Override
		public int compare (Assignment o1,Assignment o2){ //the compare function compares assignments by ID 
		
			 char a=o1.getid().charAt(0);
			 char b=o2.getid().charAt(0);
				if(a > 64 && a < 123 && b>64 && b<123){ //to check if first character is char or int 
				       if(a > b)
				      {
				          return a-b;
				      }
				     if(a == b) //if first character is equal then compare the numbers 
				     {
				         return Integer.parseInt(o1.getid().substring(1))-Integer.parseInt(o2.getid().substring(1));
				     }
				  }
			   else //if all are integers then we can directly compare the numbers 
			   
			      return Integer.parseInt(o1.getid())-Integer.parseInt(o2.getid());    
			     
			return -1;
		}
	}
	public static class sortbymarks implements Comparator<Assignment>{//this does sorting by maximum basemarks for the type 1 students 
		@Override
		public int compare (Assignment o1,Assignment o2){
			if(o1.getmarks() != o2.getmarks()){
				return o2.getmarks()-o1.getmarks();
			}
			if(o1.getmarks()==o2.getmarks()){
			 char a=o1.getid().charAt(0);
			  char b=o2.getid().charAt(0);
				if(a > 64 && a < 123 && b>64 && b<123){//to check if first character is char or int 
				       if(a > b)
				      {
				          return a-b;
				      }
				     if(a == b) //if first character is equal then compare the numbers 
				     {
				         return Integer.parseInt(o1.getid().substring(1))-Integer.parseInt(o2.getid().substring(1));
				     }
				  }
			   else //if all are integers then we can directly compare the numbers
			      return Integer.parseInt(o1.getid())-Integer.parseInt(o2.getid());    
			     }
			return -1;
		}
	}
	public static class sortbycal implements Comparator<Assignment>{//this does sorting by nearest deadline date for the type 0 students 
		@Override
		public int compare(Assignment o1, Assignment o2) {
		if( o1.getcal().getyear() != o2.getcal().getyear())
		{ // compare by year
		return o1.getcal().getyear()-o2.getcal().getyear();
		}
		if(o1.getcal().getyear()== o2.getcal().getyear()){
		if(o1.getcal().getmonth() != o2.getcal().getmonth() ){//compare by month
		return o1.getcal().getmonth()-o2.getcal().getmonth();
		}
		if( o1.getcal().getmonth() == o2.getcal().getmonth() ){
		if(o1.getcal().getdate() != o2.getcal().getdate())//compare by date
		{
		return o1.getcal().getdate()-o2.getcal().getdate();
		}
		if(o1.getcal().getdate() == o2.getcal().getdate())
		{
			  char a=o1.getid().charAt(0);
			  char b=o2.getid().charAt(0);
				if(a > 64 && a < 123 && b>64 && b<123){//to check if first character is char or int 
				       if(a > b) 
				      {
				          return a-b;
				      }
				     if(a == b) //if first character is equal then compare the numbers
				     {
				         return Integer.parseInt(o1.getid().substring(1))-Integer.parseInt(o2.getid().substring(1));
				     }
				  }
			   else //if all are integers then we can directly compare the numbers
			      return Integer.parseInt(o1.getid())-Integer.parseInt(o2.getid());    
			     }
		  }
	}
	return -1;
		}	
	}
	
	public static class Assignment {//Assignment class contains id,subject date ,time ,month ,marks and difficulty value 
		private String id;
	    private	String sub;
		private Date cc;
		private int marks;
		private int val;
		
		public Assignment(String id,String sub,Date cc,int marks,int val){//constructor of Assignment class
		this.id=id;
		this.sub=sub;
		this.cc=cc;
		this.marks=marks;
		this.val=val;
		}
		public Assignment(){//inbuilt constructor also kept 
		    ;
		}
		
     //to get and set the private attributes of assignment class
		public String getid(){ 
		return id;
		}
		public String getsub(){
		return sub;
		}
 
		public Date getcal(){
		return cc;
		}
		public int getmarks(){
		return marks;
		}
		public int getval(){
			return val;
		}
	}
	public static class Date{//Date class contains date ,month,year
	private int date;
		private int month;
		private int year;
		public Date(int date,int month,int year){//constructor of Date class
		this.date=date;
		this.month=month;
		this.year=year;
		}
		public Date(){
		    ;
		}
		public int getdate(){
		return date;
		}
		public int getmonth(){
		return month;
		}
		public int getyear()
		{
		return year;
		}	
	}
	public static class Student{//student class
	private	String roll;
	private	String name;
	private	int intel;
	private	int type;
	
		public Student(String roll,String name,int intel,int type){//constructor of student class
		this.name=name;
		this.roll=roll;
		this.intel=intel;
		this.type=type;
		}
		public Student(){
		    ;
		}
		public String getroll(){
		return roll;
		}
		public String getname(){
		return name;
		}
		public int getintel(){
		return intel;
		}
		public int gettype(){
			return type;
		}
	}
public static class Batch{//batch class formed which contains student type attribute
    private Student std[]=new Student[1000];
     int i;
     public Batch(){
         ;
     }
    //set and get functions for batch class
    public void setstudent(Student st,int i){
       std[i]=st;
    }
    public Student getstudent(int i){
        return std[i];
    }
}
   public static void main(String[] args) {
	   Scanner s=new Scanner(System.in);//to scan scanner is used
	   
	int t=s.nextInt();//t=testcases
	
	for(int i=0;i<t;i++){
		 int n=s.nextInt(); //n=number of students
         Batch b=new Batch(); //for each test case a batch class containing all students is formed
         
         for(int j=0;j<n;j++){ //to scan all students
        	 String roll=s.next();
        	 String name=s.next();
        	 int intel=s.nextInt();
        	 int type=s.nextInt();
        	 Student ss=new Student(roll,name,intel,type);//an object of student class is instantiated
        	 b.setstudent(ss,j);//the i-th index of student class in batch array is set the value of just scanned student ss
        	 
         }
         ArrayList<Assignment> aa=new ArrayList<Assignment>(); //an arraylist is created to contains assignment type objects
         int v=s.nextInt();  //v=number of assignments
         for(int k=0;k<v;k++){ //to scan all assignments and their attributes
        	 String id=s.next();
        	 String sub=s.next();
        	 int date=s.nextInt();
        	 int month=s.nextInt();
        	 int year=s.nextInt(); 
        	 int marks =s.nextInt();
        	 int val=s.nextInt();
        	 
        	Date cc=new Date(date,month,year); //cc object of Date class is formed
        	aa.add(new Assignment(id,sub,cc,marks,val));
       	 }
         for(int ji=0;ji<n;ji++){ //the loop runs for number of students so that the properties of each student is printed 
        	 System.out.println(b.getstudent(ji).getroll()+" "+b.getstudent(ji).getname());//accessing and printing rollnumber and name of student (ji) of batch class b
        	 int x=b.getstudent(ji).gettype(); //x= type of student 
        	 int y=b.getstudent(ji).getintel(); //y=intelligence of student
        	ArrayList<Assignment> bb=new ArrayList<Assignment>(); //a new arraylist bb contains only those assignment which satisfy our criteria
        	for(int cx=0;cx<aa.size();cx++){
        		if(aa.get(cx).getval() <= y){
        			bb.add(aa.get(cx));
        		}
        	}
        	if(x == 0){ //for type 0 student, sort by nearest approaching deadline date 
        		Collections.sort(bb,new sortbycal());
        	}
        	if(x==1){ //for type 1 students,sort by maximum base marks assignment 
        		Collections.sort(bb,new sortbymarks());
        	}
        	if(x==2){//sort by lexicographically smaller id
        		Collections.sort(bb,new sortbyid());
        	}
        	int sum=0; 
        	for(int ci=0;ci<bb.size();ci++){// to print id and subject and corresponding marks for each students 
        		System.out.println(bb.get(ci).getid()+" "+bb.get(ci).getsub()+" "+y*bb.get(ci).getmarks());
        	     sum=sum+y*bb.get(ci).getmarks();
        	}
        	System.out.println(sum);//to print total sum of marks obtained by the student 
         }
   } 
  }
}
